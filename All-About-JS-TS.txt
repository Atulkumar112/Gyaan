--> // prompt() method:- this is similer to alert function but it takes input from user in our pop up window it's use to take the input from user.
--> // console.table:- ex:- 
const obj = {a: 1, b: 2, c: 3};
console.table(obj) // the outpt should be in table form. just run it in console and see.

----------for serching logic------------
 if (query === '') {
    result = allSpacecrafts.value
  } else {
    result = allSpacecrafts.value.filter((s) =>
      (
        (s?.name ?? '').replace(/[^A-Za-z]/g, '').toLowerCase() + s.noradCatId
      ).includes(query)
    )
  }
  
 --> // idName.classList.add("thisIsMyClassName");
 --> // idName.classList.toggle("thisIsMyClassName")  // most imp:- if this id already have this class then it will remove it and if this id have not this class then it will add it this class.
 
 --> SetTimeOut:- when i want to execute our js code after a certain time of period then we use setTimeout function. Ex:- show some popup on your website after 2-3 second of loading you website landing page.
 
 --> SetInterval:- when you want to run you js code again and again for the certain time or until you will not stop it. Ex:- if you want to get the data from you Api endpoint but it can take 20 second to 60 second to get the data (also based upon the internet) then we use it and we will check again and again like we got data or not. if we not get data then continue our timeInterval and if we got data then stop you interval.
 
 -----------------------------------------------------Diff between addEventListener and onClick() event ------------------------------------------------
 --> addEventListener:- The addEventListener() method can have multiple event handlers applied to the same element. It doesn’t overwrite other event handlers. it's takes 3 parameters first is event name, second is task/function name, last one is useCapture which is optional.
1 event: Event can be any valid JavaScript event. Events are used without the “on” prefix like use “click” instead of “onclick” or “mousedown” instead of “onmousedown”.
2 listener(handler function): It can be a JavaScript function that responds to the event that occurs.
3 useCapture:  (Optional parameter) A Boolean value that specifies whether the event should be executed in the capturing or in the bubbling phase.

Example:- 
<body>
<button id="btn">Click here</button>
<h1 id="text1"></h1>
<h1 id="text2"></h1>                                                            //output
										when you click on the button both heading will appears
<script>
	let btn_element = document.getElementById("btn");			so the output is:
										text1
	btn_element.addEventListener("click", () => {				text2
	document.getElementById("text1")
		.innerHTML = "Task 1 is performed";
	})

	btn_element.addEventListener("click", () => {
	document.getElementById("text2")
		.innerHTML = "Task 2 is performed";
	});
</script>
</body>


--> onClick event:- The onclick event logs the click activity, and then calls a desired function, the onClick event only adds one event to an element.
if we try to write more than one property/event funtion, then it will be overwritten.

Example:-  
<body>
<button id="btn">Click here</button>
<h1 id="text1"></h1>                                                            //Output
<h1 id="text2"></h1>								it will be overwrite first event from the second one so output is
																
<script>									text2
	let btn_element = document.getElementById("btn");

	btn_element.onclick = () => {
	document.getElementById("text1")
		.innerHTML = "Task 1 is performed";
	};

	btn_element.onclick = () => {
	document.getElementById("text2")
		.innerHTML = "Task 2 is performed";
	};
</script>
</body>

